import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

feature_weights = {
    '–¥–∑_—Ä–∞–∑–º–µ—Ä': 0.9,
    '–ø–æ–≥–æ–¥–∞': 0.7,
    '–ø—Ä–∏—á–µ—Å–∫–∞': 0.3,
    '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª': 0.6,
    '–∫–æ–Ω—Å—Ç–∞': 0.8
}

@st.cache_data
def load_data():
    df = pd.read_csv("data_danya.csv")
    required_columns = ['–¥–∑_—Ä–∞–∑–º–µ—Ä', '–ø–æ–≥–æ–¥–∞', '–ø—Ä–∏—á–µ—Å–∫–∞', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª', '–∫–æ–Ω—Å—Ç–∞', '–æ–ø–æ–∑–¥–∞–Ω–∏–µ_–º–∏–Ω—É—Ç—ã']
    if not all(col in df.columns for col in required_columns):
        missing = [col for col in required_columns if col not in df.columns]
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")

    encoders = {
        '–¥–∑_—Ä–∞–∑–º–µ—Ä': LabelEncoder().fit(['–ª–µ–≥–∫–æ', '—Ç—è–∂–µ–ª–æ']),
        '–ø–æ–≥–æ–¥–∞': LabelEncoder().fit(['—Å–æ–ª–Ω–µ—á–Ω–æ', '—Å–Ω–µ–≥', '–¥–æ–∂–¥—å']),
        '–ø—Ä–∏—á–µ—Å–∫–∞': LabelEncoder().fit(['–¥–ª–∏–Ω–Ω–∞—è', '–∫–æ—Ä–æ—Ç–∫–∞—è']),
        '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª': LabelEncoder().fit(['–Ω–µ—Ç', '–¥–∞']),
        '–∫–æ–Ω—Å—Ç–∞': LabelEncoder().fit(['–Ω–µ—Ç', '–¥–∞'])
    }

    for col in encoders:
        df[col] = encoders[col].transform(df[col])

    return df, encoders

@st.cache_resource
def train_model(df):
    X = df[['–¥–∑_—Ä–∞–∑–º–µ—Ä', '–ø–æ–≥–æ–¥–∞', '–ø—Ä–∏—á–µ—Å–∫–∞', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª', '–∫–æ–Ω—Å—Ç–∞']]
    y = df['–æ–ø–æ–∑–¥–∞–Ω–∏–µ_–º–∏–Ω—É—Ç—ã']
    model = RandomForestClassifier(n_estimators=150, random_state=42)
    model.fit(X, y)
    return model

def main():
    try:
        df, encoders = load_data()
        model = train_model(df)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return

    st.title("üìö –ü—Ä–æ–≥–Ω–æ–∑ –æ–ø–æ–∑–¥–∞–Ω–∏—è –î–∞–Ω–∏")
    st.markdown("---")
    st.sidebar.header("‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤")
    weights = {
        '–¥–∑_—Ä–∞–∑–º–µ—Ä': st.sidebar.slider("–†–∞–∑–º–µ—Ä –î–ó", 0.5, 2.0, feature_weights['–¥–∑_—Ä–∞–∑–º–µ—Ä']),
        '–ø–æ–≥–æ–¥–∞': st.sidebar.slider("–ü–æ–≥–æ–¥–∞", 0.3, 1.5, feature_weights['–ø–æ–≥–æ–¥–∞']),
        '–ø—Ä–∏—á–µ—Å–∫–∞': st.sidebar.slider("–ü—Ä–∏—á–µ—Å–∫–∞", 0.1, 1.0, feature_weights['–ø—Ä–∏—á–µ—Å–∫–∞']),
        '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª': st.sidebar.slider("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 0.4, 1.8, feature_weights['–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª']),
        '–∫–æ–Ω—Å—Ç–∞': st.sidebar.slider("–ö–æ–Ω—Å—Ç–∞", 0.5, 2.2, feature_weights['–∫–æ–Ω—Å—Ç–∞'])
    }

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns(2)
    with col1:
        dz_size = st.selectbox("üìù –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –î–ó", encoders['–¥–∑_—Ä–∞–∑–º–µ—Ä'].classes_)
        weather = st.selectbox("üå§Ô∏è –ü–æ–≥–æ–¥–∞", encoders['–ø–æ–≥–æ–¥–∞'].classes_)
    with col2:
        hair = st.selectbox("üíá –ü—Ä–∏—á–µ—Å–∫–∞", encoders['–ø—Ä–∏—á–µ—Å–∫–∞'].classes_)
        warned = st.radio("üì¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª?", encoders['–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª'].classes_)
        consta = st.radio("üéì –ö–æ–Ω—Å—Ç–∞?", encoders['–∫–æ–Ω—Å—Ç–∞'].classes_)

    if st.button("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"):
        try:
            features = [
                encoders['–¥–∑_—Ä–∞–∑–º–µ—Ä'].transform([dz_size])[0] * weights['–¥–∑_—Ä–∞–∑–º–µ—Ä'],
                encoders['–ø–æ–≥–æ–¥–∞'].transform([weather])[0] * weights['–ø–æ–≥–æ–¥–∞'],
                encoders['–ø—Ä–∏—á–µ—Å–∫–∞'].transform([hair])[0] * weights['–ø—Ä–∏—á–µ—Å–∫–∞'],
                encoders['–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª'].transform([warned])[0] * weights['–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–ª'],
                encoders['–∫–æ–Ω—Å—Ç–∞'].transform([consta])[0] * weights['–∫–æ–Ω—Å—Ç–∞']
            ]
            
            features_df = pd.DataFrame(
                [features], 
                columns=model.feature_names_in_
            )

            proba = model.predict_proba(features_df)[0]
            st.markdown("### üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ–ø–æ–∑–¥–∞–Ω–∏—è")
            results = pd.DataFrame({
                '–ú–∏–Ω—É—Ç—ã': model.classes_,
                '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba
            }).sort_values('–ú–∏–Ω—É—Ç—ã', ascending=False)

            for _, row in results.iterrows():
                st.markdown(f"**{row['–ú–∏–Ω—É—Ç—ã']} –º–∏–Ω**: {row['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å']*100:.1f}%")
                st.progress(row['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'])

            avg_delay = np.dot(proba, model.classes_)
            st.markdown(f"**–°—Ä–µ–¥–Ω–µ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –æ–ø–æ–∑–¥–∞–Ω–∏–µ:** {avg_delay:.1f} –º–∏–Ω—É—Ç")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()